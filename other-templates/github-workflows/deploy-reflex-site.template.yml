# Deploys a reflex site
name: Deploy Site

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: true
        default: "main"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    environment:
      name: production
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Set up uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          # pyproject-file: "pyproject.toml"

      - name: Create .env for frontend
        run: |
          echo "DOMAIN=${{ vars.DOMAIN }}" >> .env
          echo "RECAPTCHA_SITE_KEY=${{ secrets.RECAPTCHA_SITE_KEY }}" >> .env
          echo "RECAPTCHA_SECRET_KEY=${{ secrets.RECAPTCHA_SECRET_KEY }}" >> .env

      - name: Create directories
        run: |
          mkdir -p "tmp_frontend_zip"
          mkdir -p "site"

      - name: Build frontend
        run: |
          mkdir -p "tmp_frontend_zip"
          mkdir -p "site"
          uv run reflex export --frontend-only --zip-dest-dir "tmp_frontend_zip"
          unzip -q tmp_frontend_zip/frontend.zip -d site/
          rm -r "tmp_frontend_zip"

      - name: Send frontend static files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.DROPLET_IP }}
          username: webadmin
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: ./site/
          target: sites/${{ vars.SITE_NAME }}/static/
          strip_components: 1
          overwrite: true

      - name: Update frontend files on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ vars.DROPLET_IP }}
          username: webadmin
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # Note: This script is present on the server from the webserver setup
          script: |
            ./scripts/webserver-update-static-files.sh

      - name: Remove .env
        if: always()
        run: rm .env

  deploy-backend:
    runs-on: ubuntu-latest
    environment:
      name: production
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lower case owner name
        shell: bash
        run: |
          echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
        env:
          OWNER: "${{ github.repository_owner }}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: backend.Dockerfile
          push: true
          tags: ghcr.io/${{ env.OWNER_LC }}/${{ vars.SITE_NAME }}-backend:latest

      - name: Create .env for backend
        run: |
          echo "DOMAIN=${{ vars.DOMAIN }}" >> .env
          echo "RECAPTCHA_SITE_KEY=${{ secrets.RECAPTCHA_SITE_KEY }}" >> .env
          echo "RECAPTCHA_SECRET_KEY=${{ secrets.RECAPTCHA_SECRET_KEY }}" >> .env

      - name: Send .env file to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.DROPLET_IP }}
          username: webadmin
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: .env
          target: sites/${{ vars.SITE_NAME }}
          overwrite: true

      - name: Set .env permissions
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ vars.DROPLET_IP }}
          username: webadmin
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            chmod 600 sites/${{ vars.SITE_NAME }}/.env

      - name: Pull new backend image on server and restart updated container
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ vars.DROPLET_IP }}
          username: webadmin
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Log in to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin && \
            docker pull ghcr.io/${{ env.OWNER_LC }}/${{ vars.SITE_NAME }}-backend:latest && \
            docker compose up -d

      - name: Remove .env
        if: always()
        run: rm .env
