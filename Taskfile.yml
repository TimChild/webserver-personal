# Taskfile for webserver related tasks
# # E.g. created droplet, deploying website, etc.
version: "3"

includes:
  droplet:
    taskfile: taskfile-droplet.yml
    flatten: false

tasks:
  add-ssh-key:
    desc: |
      Generate a new SSH key pair, add the public key to known hosts on the vps, and copy the private key to clipboard.
      Useful for setting up ssh keys on github actions etc.

    requires:
      vars: [SSH_NAME]
    vars:
      SSH_NAME: '{{default "webserver" .SSH_NAME}}'
    cmds:
      # Generate a new SSH key pair without a passphrase
      - ssh-keygen -f /tmp/temp_ssh_key -N ""
      - defer: rm /tmp/temp_ssh_key /tmp/temp_ssh_key.pub

      - ssh {{ .SSH_NAME }} "echo $(cat /tmp/temp_ssh_key.pub) >> ~/.ssh/authorized_keys"
      # Copy the private key to the clipboard
      - xsel --clipboard < /tmp/temp_ssh_key
      # Print the private key to the console (for manual copying)
      - cat /tmp/temp_ssh_key

  new-slideshow:
    desc: "Create a new reveal.js presentation in current directory. Optionally provide SUBDIR to specify a subdirectory."
    vars:
      SUBDIR: '{{default "" .SUBDIR}}'
    prerequisites:
      - test -d "{{.TASKFILE_DIR}}/revealjs-template"
    dir: "{{.TASKFILE_DIR}}" # Otherwise uses parent taskfile dir
    cmds:
      - echo "Creating new reveal.js presentation in {{.USER_WORKING_DIR}}/{{.SUBDIR}}"
      - scripts/new-revealjs.sh "{{.TASKFILE_DIR}}/revealjs-template" "{{.USER_WORKING_DIR}}" "{{.SUBDIR}}"

  new-static-site:
    desc: |
      Initialize a new static site on the webserver droplet. 
      Requires:
        - SITE_NAME
        - optional DOMAIN (to create a new caddy config from template)
    requires:
      vars: [SSH_NAME, SITE_NAME]
    vars:
      SSH_NAME: '{{default "webserver" .SSH_NAME}}'
      DOMAIN: '{{default "" .DOMAIN}}'
    dir: "{{.TASKFILE_DIR}}" # Otherwise uses parent taskfile dir
    cmds:
      - |
        echo "Initializing new static site on droplet {{.SSH_NAME}}:sites/{{.SITE_NAME}}"
      - scripts/setup-webserver-new-static-site.sh "{{.SSH_NAME}}" "{{.SITE_NAME}}" "{{.DOMAIN}}"

  new-backend-site:
    desc: |
      Initialize a new site that also runs a backend service.
      Requires:
        - SITE_NAME: The name of the site (used for directory and caddy config)
        - DOMAIN: The domain name to use for the site
        - BACKEND_IMAGE: The name of the backend image to use (e.g. ghcr.io/<username>/<image>:latest)
    requires:
      vars: [SSH_NAME, SITE_NAME, BACKEND_IMAGE]
    vars:
      SSH_NAME: '{{default "webserver" .SSH_NAME}}'
      DOMAIN: '{{default "" .DOMAIN}}'
    dir: "{{.TASKFILE_DIR}}" # Otherwise uses parent taskfile dir
    cmds:
      - |
        echo "Initializing new backend site on droplet {{.SSH_NAME}}:sites/{{.SITE_NAME}}"
      - scripts/setup-webserver-new-backend-site.sh "{{.SSH_NAME}}" "{{.SITE_NAME}}" "{{.BACKEND_IMAGE}}" "{{.DOMAIN}}"

  remove-site:
    desc: "Remove a site from the webserver droplet (requires SITE_NAME)"
    prompt: 'Are you sure you want to remove site ''{{.SITE_NAME}}'' from the server "{{.SSH_NAME}}?"'
    requires:
      vars: [SSH_NAME, SITE_NAME]
    dir: "{{.TASKFILE_DIR}}" # Otherwise uses parent taskfile dir
    cmds:
      - ssh {{.SSH_NAME}} 'bash -s' < scripts/webserver-remove-site.sh "{{.SITE_NAME}}"
      - echo "Removing the local site configuration"
      - rm -rf "{{.TASKFILE_DIR}}/sites-enabled/{{.SITE_NAME}}.caddy"

  deploy-static:
    desc: "Deploy website (static files) to droplet (requires STATIC_DIR and SITE_NAME)"
    summary: |
      Deploy static files to the webserver droplet. 
      Vars:
        - SSH_NAME: The name of the droplet to deploy to (default "webserver")
        - SITE_NAME: The name of the site to deploy
        - optional STATIC_DIR: The directory containing the static files (default static)
        - optional PROJECT_DIR: The root directory for the site (default user working directory)
    requires:
      vars: [SSH_NAME, SITE_NAME]
    vars:
      SSH_NAME: '{{default "webserver" .SSH_NAME}}'
      STATIC_DIR: '{{default "static" .STATIC_DIR}}'
      PROJECT_DIR: "{{default .USER_WORKING_DIR .PROJECT_DIR}}"
      _FULL_DIR: "{{.PROJECT_DIR}}/{{.STATIC_DIR}}/"
    preconditions:
      - sh: test -d "{{._FULL_DIR}}"
        msg: |
          Directory "{{._FULL_DIR}}" does not exist (maybe need to change the STATIC_DIR variable? 
          (or run from different dir or explicitly set PROJECT_DIR))
    cmds:
      - |
        echo "Deploying static files from {{._FULL_DIR}} to server at {{.SSH_NAME}}:srv/www/{{.SITE_NAME}}"
      # First copy to the webserver user directory
      - rsync -avz --delete {{._FULL_DIR}}/ {{.SSH_NAME}}:sites/{{.SITE_NAME}}/static/
      - task: caddy-reload
        vars:
          SSH_NAME: "{{.SSH_NAME}}"

  deploy-docker-backend:
    desc: "Deploy a backend docker image to the webserver"
    summary: |
      Build and push a backend docker image to the webserver droplet.
      Vars:
        - SSH_NAME: The name of the droplet to deploy to
        - SITE_NAME: The name of the site to deploy
        - USERNAME: The username for the docker registry
        - optional REGISTRY: The docker registry to use (default ghcr.io)
        - optional DOCKERFILE_PATH: The path to the Dockerfile (default Dockerfile)
        - optional PROJECT_DIR: The root directory for the site (default user working directory)
    requires:
      vars: [SSH_NAME, SITE_NAME, USERNAME]
    vars:
      REGISTRY: '{{default "ghcr.io" .REGISTRY}}'
      USERNAME: '{{default "<set default here>" .USERNAME}}'
      DOCKERFILE_PATH: '{{default "Dockerfile" .DOCKERFILE_PATH}}'
      PROJECT_DIR: "{{default .USER_WORKING_DIR .PROJECT_DIR}}"
      _FULL_DOCKERFILE_PATH: "{{.PROJECT_DIR}}/{{.DOCKERFILE_PATH}}"
      _FULL_REGISTRY_PATH: "{{.REGISTRY}}/{{.USERNAME}}/{{.SITE_NAME}}-backend:latest"
    cmds:
      - |
        echo "Deploying backend docker image to server at {{.SSH_NAME}}:sites/{{.SITE_NAME}}"
      - docker build -t {{._FULL_REGISTRY_PATH}} -f {{._FULL_DOCKERFILE_PATH}} {{.PROJECT_DIR}}
      - docker push {{._FULL_REGISTRY_PATH}} || echo "Make sure you are logged in with write permissions (e.g. `echo $GH_PAT | docker login -u <username> ghcr.io --password-stdin`)"
      - task: caddy-reload
        vars:
          SSH_NAME: "{{.SSH_NAME}}"

  caddy-reload:
    desc: "Reload the Caddy webserver after sending any configuration changes"
    requires:
      vars: [SSH_NAME]
    vars:
      SSH_NAME: '{{default "webserver" .SSH_NAME}}'
    dir: "{{.TASKFILE_DIR}}" # Otherwise uses parent taskfile dir
    cmds:
      - scripts/send-webserver-config.sh "{{.SSH_NAME}}"
      - ssh {{.SSH_NAME}} "bash -s " < scripts/webserver-update-static-files.sh
      # Do a quick caddy reload (sufficient for minor changes) (or start if no services running)
      # NOTE: May require logging into container repos first via `echo $GH_PAT | docker login -u <username> ghcr.io --password-stdin`
      - ssh {{.SSH_NAME}} "docker exec caddy caddy reload --config /etc/caddy/Caddyfile || docker compose -f caddy-compose.yaml up -d"
      - task: _caddy-restart-compose-if-changed
        vars:
          SSH_NAME: "{{.SSH_NAME}}"

  _caddy-restart-compose-if-changed:
    silent: true
    internal: true
    desc: "Fully restarts the docker compose services if the compose file has changed (locally)"
    requires:
      vars: [SSH_NAME]
    sources:
      - caddy-compose.yaml
    cmds:
      # Fully stop and start in case any changes made to compose file
      - ssh {{.SSH_NAME}} "docker compose -f caddy-compose.yaml down && docker compose -f caddy-compose.yaml up -d"
